name: Continuous Integration
on: [push, pull_request]
jobs:
  build:
    name: Build - ${{matrix.compiler}} ${{matrix.arch}}
    runs-on: windows-2022
    strategy:
      matrix:
        arch: [x86, x64]
        compiler: [msvc, clang]
    steps:
      - name: Fetch code-signing key
        id: fetch-key
        env:
          CODE_SIGNING_PFX_BASE64: ${{ secrets.CODE_SIGNING_KEY_PFX_BASE64 }}
        if: github.event_name == 'push'
        run: |
          if ($Env:CODE_SIGNING_PFX_BASE64 -eq "") {
            Write-Host "No code signing key in env var."
            Add-Content $Env:GITHUB_OUTPUT "HAVE_KEY=false"
          } else {
            $pfxPath="${{runner.temp}}\MyCert.pfx"
            [System.Convert]::FromBase64String($Env:CODE_SIGNING_PFX_BASE64) | Set-Content $pfxPath -AsByteStream
            Add-Content $Env:GITHUB_OUTPUT "HAVE_KEY=true"
            Add-Content $Env:GITHUB_OUTPUT "PATH=$pfxPath"
          }
      - uses: actions/checkout@v3
        with:
          path: source
          fetch-depth: 0
      - name: Fetch submodules
        working-directory: source
        run: git submodule update --init
      - uses: ilammy/msvc-dev-cmd@cec98b9d092141f74527d0afa6feb2af698cfe89
        with:
          arch: ${{matrix.arch}}
      - name: Build
        id: build
        working-directory: source
        run: |
          $args = @()
          if ("${{matrix.compiler}}" -eq "clang") {
            $args += "-Clang"
          }
          if ("${{github.ref_type}}" -eq "tag") {
            $tag = "${{github.ref_name}}" -replace '^v',''
            $args += @("-Version","$tag.${{github.run_number}}")
          } else {
            $args += @("-Version","0.0.0.${{github.run_number}}")
          }
          .\build.ps1 @args
          if ($LastExitCode -ne 0) {
            return $LastExitCode;
          }
          Copy-Item install.ps1 out\
          Copy-Item wrap.ps1 out\
          Copy-Item README.md out\
      - name: Sign DLLs and scripts
        working-directory: source\out
        if: ${{steps.fetch-key.outputs.HAVE_KEY == 'true' }}
        run: |
          $to_sign = Get-ChildItem "*.dll","*.ps1"
          function Sign-File {
            param ($FilePath)

            # Known path for the GitHub Actions windows 2022 runner, may need updating
            & 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x86\signtool.exe' `
              sign `
              /t http://timestamp.digicert.com `
              /fd SHA256 `
              /f "${{steps.fetch-key.outputs.PATH}}" `
              $FilePath
          }

          foreach ($file in $to_sign) {
            Sign-File $file.FullName
          }
      - name: Attach files to build
        uses: actions/upload-artifact@v3
        with:
          name: OpenXR-Tracing-${{matrix.compiler}}-${{matrix.arch}}-GHA-${{github.run_number}}
          path: |
            source/out/README.md
            source/out/*.dll
            source/out/*.ps1
            source/out/*.json
  release:
    name: "Create draft release"
    needs: [build]
    runs-on: windows-2022
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${{runner.temp}}/artifacts
      - name: Display downloaded files
        run: Get-ChildItem -Recurse
        working-directory: ${{runner.temp}}/artifacts
