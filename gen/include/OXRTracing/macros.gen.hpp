// *********** THIS FILE IS GENERATED - DO NOT EDIT ***********
// MIT License
//
// Copyright(c) 2021-2022 Matthieu Bucchianeri
// Copyright(c) 2023 Fred Emmott
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this softwareand associated documentation files(the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and /or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions :
//
// The above copyright noticeand this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma once

#include <openxr.h>

#include <format>

//////////////////////////////////////////////////
///// Generated macros for OpenXR base types /////
//////////////////////////////////////////////////

// EXCLUDED - HANDWRITTEN: #define OXRTL_ARGS_XrVersion(x, name)
#define OXRTL_ARGS_XrFlags64(x, name) OXRTL_ARGS_uint64_t(x, name)
#define OXRTL_ARGS_XrSystemId(x, name) OXRTL_ARGS_ATOM(x, name)
#define OXRTL_ARGS_XrBool32(x, name) OXRTL_ARGS_uint32_t(x, name)
#define OXRTL_ARGS_XrPath(x, name) OXRTL_ARGS_ATOM(x, name)
#define OXRTL_ARGS_XrTime(x, name) OXRTL_ARGS_int64_t(x, name)
#define OXRTL_ARGS_XrDuration(x, name) OXRTL_ARGS_int64_t(x, name)
#define OXRTL_ARGS_XrInstance(x, name) OXRTL_ARGS_HANDLE(x, name)
#define OXRTL_ARGS_XrSession(x, name) OXRTL_ARGS_HANDLE(x, name)
#define OXRTL_ARGS_XrSpace(x, name) OXRTL_ARGS_HANDLE(x, name)
#define OXRTL_ARGS_XrAction(x, name) OXRTL_ARGS_HANDLE(x, name)
#define OXRTL_ARGS_XrSwapchain(x, name) OXRTL_ARGS_HANDLE(x, name)
#define OXRTL_ARGS_XrActionSet(x, name) OXRTL_ARGS_HANDLE(x, name)
#define OXRTL_ARGS_XrInstanceCreateFlags(x, name) OXRTL_ARGS_XrFlags64(x, name)
#define OXRTL_ARGS_XrSessionCreateFlags(x, name) OXRTL_ARGS_XrFlags64(x, name)
#define OXRTL_ARGS_XrSpaceVelocityFlags(x, name) OXRTL_ARGS_XrFlags64(x, name)
#define OXRTL_ARGS_XrSpaceLocationFlags(x, name) OXRTL_ARGS_XrFlags64(x, name)
#define OXRTL_ARGS_XrSwapchainCreateFlags(x, name) OXRTL_ARGS_XrFlags64(x, name)
#define OXRTL_ARGS_XrSwapchainUsageFlags(x, name) OXRTL_ARGS_XrFlags64(x, name)
#define OXRTL_ARGS_XrCompositionLayerFlags(x, name) \
	OXRTL_ARGS_XrFlags64(x, name)
#define OXRTL_ARGS_XrViewStateFlags(x, name) OXRTL_ARGS_XrFlags64(x, name)
#define OXRTL_ARGS_XrInputSourceLocalizedNameFlags(x, name) \
	OXRTL_ARGS_XrFlags64(x, name)

/////////////////////////////////////////////
///// Generated macros for OpenXR enums /////
/////////////////////////////////////////////

namespace OXRTracing {
inline const char* ToCString(XrResult value)
{
	switch (value) {
	case XR_SUCCESS:
		return "XR_SUCCESS";
	case XR_TIMEOUT_EXPIRED:
		return "XR_TIMEOUT_EXPIRED";
	case XR_SESSION_LOSS_PENDING:
		return "XR_SESSION_LOSS_PENDING";
	case XR_EVENT_UNAVAILABLE:
		return "XR_EVENT_UNAVAILABLE";
	case XR_SPACE_BOUNDS_UNAVAILABLE:
		return "XR_SPACE_BOUNDS_UNAVAILABLE";
	case XR_SESSION_NOT_FOCUSED:
		return "XR_SESSION_NOT_FOCUSED";
	case XR_FRAME_DISCARDED:
		return "XR_FRAME_DISCARDED";
	case XR_ERROR_VALIDATION_FAILURE:
		return "XR_ERROR_VALIDATION_FAILURE";
	case XR_ERROR_RUNTIME_FAILURE:
		return "XR_ERROR_RUNTIME_FAILURE";
	case XR_ERROR_OUT_OF_MEMORY:
		return "XR_ERROR_OUT_OF_MEMORY";
	case XR_ERROR_API_VERSION_UNSUPPORTED:
		return "XR_ERROR_API_VERSION_UNSUPPORTED";
	case XR_ERROR_INITIALIZATION_FAILED:
		return "XR_ERROR_INITIALIZATION_FAILED";
	case XR_ERROR_FUNCTION_UNSUPPORTED:
		return "XR_ERROR_FUNCTION_UNSUPPORTED";
	case XR_ERROR_FEATURE_UNSUPPORTED:
		return "XR_ERROR_FEATURE_UNSUPPORTED";
	case XR_ERROR_EXTENSION_NOT_PRESENT:
		return "XR_ERROR_EXTENSION_NOT_PRESENT";
	case XR_ERROR_LIMIT_REACHED:
		return "XR_ERROR_LIMIT_REACHED";
	case XR_ERROR_SIZE_INSUFFICIENT:
		return "XR_ERROR_SIZE_INSUFFICIENT";
	case XR_ERROR_HANDLE_INVALID:
		return "XR_ERROR_HANDLE_INVALID";
	case XR_ERROR_INSTANCE_LOST:
		return "XR_ERROR_INSTANCE_LOST";
	case XR_ERROR_SESSION_RUNNING:
		return "XR_ERROR_SESSION_RUNNING";
	case XR_ERROR_SESSION_NOT_RUNNING:
		return "XR_ERROR_SESSION_NOT_RUNNING";
	case XR_ERROR_SESSION_LOST:
		return "XR_ERROR_SESSION_LOST";
	case XR_ERROR_SYSTEM_INVALID:
		return "XR_ERROR_SYSTEM_INVALID";
	case XR_ERROR_PATH_INVALID:
		return "XR_ERROR_PATH_INVALID";
	case XR_ERROR_PATH_COUNT_EXCEEDED:
		return "XR_ERROR_PATH_COUNT_EXCEEDED";
	case XR_ERROR_PATH_FORMAT_INVALID:
		return "XR_ERROR_PATH_FORMAT_INVALID";
	case XR_ERROR_PATH_UNSUPPORTED:
		return "XR_ERROR_PATH_UNSUPPORTED";
	case XR_ERROR_LAYER_INVALID:
		return "XR_ERROR_LAYER_INVALID";
	case XR_ERROR_LAYER_LIMIT_EXCEEDED:
		return "XR_ERROR_LAYER_LIMIT_EXCEEDED";
	case XR_ERROR_SWAPCHAIN_RECT_INVALID:
		return "XR_ERROR_SWAPCHAIN_RECT_INVALID";
	case XR_ERROR_SWAPCHAIN_FORMAT_UNSUPPORTED:
		return "XR_ERROR_SWAPCHAIN_FORMAT_UNSUPPORTED";
	case XR_ERROR_ACTION_TYPE_MISMATCH:
		return "XR_ERROR_ACTION_TYPE_MISMATCH";
	case XR_ERROR_SESSION_NOT_READY:
		return "XR_ERROR_SESSION_NOT_READY";
	case XR_ERROR_SESSION_NOT_STOPPING:
		return "XR_ERROR_SESSION_NOT_STOPPING";
	case XR_ERROR_TIME_INVALID:
		return "XR_ERROR_TIME_INVALID";
	case XR_ERROR_REFERENCE_SPACE_UNSUPPORTED:
		return "XR_ERROR_REFERENCE_SPACE_UNSUPPORTED";
	case XR_ERROR_FILE_ACCESS_ERROR:
		return "XR_ERROR_FILE_ACCESS_ERROR";
	case XR_ERROR_FILE_CONTENTS_INVALID:
		return "XR_ERROR_FILE_CONTENTS_INVALID";
	case XR_ERROR_FORM_FACTOR_UNSUPPORTED:
		return "XR_ERROR_FORM_FACTOR_UNSUPPORTED";
	case XR_ERROR_FORM_FACTOR_UNAVAILABLE:
		return "XR_ERROR_FORM_FACTOR_UNAVAILABLE";
	case XR_ERROR_API_LAYER_NOT_PRESENT:
		return "XR_ERROR_API_LAYER_NOT_PRESENT";
	case XR_ERROR_CALL_ORDER_INVALID:
		return "XR_ERROR_CALL_ORDER_INVALID";
	case XR_ERROR_GRAPHICS_DEVICE_INVALID:
		return "XR_ERROR_GRAPHICS_DEVICE_INVALID";
	case XR_ERROR_POSE_INVALID:
		return "XR_ERROR_POSE_INVALID";
	case XR_ERROR_INDEX_OUT_OF_RANGE:
		return "XR_ERROR_INDEX_OUT_OF_RANGE";
	case XR_ERROR_VIEW_CONFIGURATION_TYPE_UNSUPPORTED:
		return "XR_ERROR_VIEW_CONFIGURATION_TYPE_UNSUPPORTED";
	case XR_ERROR_ENVIRONMENT_BLEND_MODE_UNSUPPORTED:
		return "XR_ERROR_ENVIRONMENT_BLEND_MODE_UNSUPPORTED";
	case XR_ERROR_NAME_DUPLICATED:
		return "XR_ERROR_NAME_DUPLICATED";
	case XR_ERROR_NAME_INVALID:
		return "XR_ERROR_NAME_INVALID";
	case XR_ERROR_ACTIONSET_NOT_ATTACHED:
		return "XR_ERROR_ACTIONSET_NOT_ATTACHED";
	case XR_ERROR_ACTIONSETS_ALREADY_ATTACHED:
		return "XR_ERROR_ACTIONSETS_ALREADY_ATTACHED";
	case XR_ERROR_LOCALIZED_NAME_DUPLICATED:
		return "XR_ERROR_LOCALIZED_NAME_DUPLICATED";
	case XR_ERROR_LOCALIZED_NAME_INVALID:
		return "XR_ERROR_LOCALIZED_NAME_INVALID";
	case XR_ERROR_GRAPHICS_REQUIREMENTS_CALL_MISSING:
		return "XR_ERROR_GRAPHICS_REQUIREMENTS_CALL_MISSING";
	case XR_ERROR_RUNTIME_UNAVAILABLE:
		return "XR_ERROR_RUNTIME_UNAVAILABLE";
	case XR_ERROR_ANDROID_THREAD_SETTINGS_ID_INVALID_KHR:
		return "XR_ERROR_ANDROID_THREAD_SETTINGS_ID_INVALID_KHR";
	case XR_ERROR_ANDROID_THREAD_SETTINGS_FAILURE_KHR:
		return "XR_ERROR_ANDROID_THREAD_SETTINGS_FAILURE_KHR";
	case XR_ERROR_CREATE_SPATIAL_ANCHOR_FAILED_MSFT:
		return "XR_ERROR_CREATE_SPATIAL_ANCHOR_FAILED_MSFT";
	case XR_ERROR_SECONDARY_VIEW_CONFIGURATION_TYPE_NOT_ENABLED_MSFT:
		return "XR_ERROR_SECONDARY_VIEW_CONFIGURATION_TYPE_NOT_ENABLED_MSFT";
	case XR_ERROR_CONTROLLER_MODEL_KEY_INVALID_MSFT:
		return "XR_ERROR_CONTROLLER_MODEL_KEY_INVALID_MSFT";
	case XR_ERROR_REPROJECTION_MODE_UNSUPPORTED_MSFT:
		return "XR_ERROR_REPROJECTION_MODE_UNSUPPORTED_MSFT";
	case XR_ERROR_COMPUTE_NEW_SCENE_NOT_COMPLETED_MSFT:
		return "XR_ERROR_COMPUTE_NEW_SCENE_NOT_COMPLETED_MSFT";
	case XR_ERROR_SCENE_COMPONENT_ID_INVALID_MSFT:
		return "XR_ERROR_SCENE_COMPONENT_ID_INVALID_MSFT";
	case XR_ERROR_SCENE_COMPONENT_TYPE_MISMATCH_MSFT:
		return "XR_ERROR_SCENE_COMPONENT_TYPE_MISMATCH_MSFT";
	case XR_ERROR_SCENE_MESH_BUFFER_ID_INVALID_MSFT:
		return "XR_ERROR_SCENE_MESH_BUFFER_ID_INVALID_MSFT";
	case XR_ERROR_SCENE_COMPUTE_FEATURE_INCOMPATIBLE_MSFT:
		return "XR_ERROR_SCENE_COMPUTE_FEATURE_INCOMPATIBLE_MSFT";
	case XR_ERROR_SCENE_COMPUTE_CONSISTENCY_MISMATCH_MSFT:
		return "XR_ERROR_SCENE_COMPUTE_CONSISTENCY_MISMATCH_MSFT";
	case XR_ERROR_DISPLAY_REFRESH_RATE_UNSUPPORTED_FB:
		return "XR_ERROR_DISPLAY_REFRESH_RATE_UNSUPPORTED_FB";
	case XR_ERROR_COLOR_SPACE_UNSUPPORTED_FB:
		return "XR_ERROR_COLOR_SPACE_UNSUPPORTED_FB";
	case XR_ERROR_SPACE_COMPONENT_NOT_SUPPORTED_FB:
		return "XR_ERROR_SPACE_COMPONENT_NOT_SUPPORTED_FB";
	case XR_ERROR_SPACE_COMPONENT_NOT_ENABLED_FB:
		return "XR_ERROR_SPACE_COMPONENT_NOT_ENABLED_FB";
	case XR_ERROR_SPACE_COMPONENT_STATUS_PENDING_FB:
		return "XR_ERROR_SPACE_COMPONENT_STATUS_PENDING_FB";
	case XR_ERROR_SPACE_COMPONENT_STATUS_ALREADY_SET_FB:
		return "XR_ERROR_SPACE_COMPONENT_STATUS_ALREADY_SET_FB";
	case XR_ERROR_UNEXPECTED_STATE_PASSTHROUGH_FB:
		return "XR_ERROR_UNEXPECTED_STATE_PASSTHROUGH_FB";
	case XR_ERROR_FEATURE_ALREADY_CREATED_PASSTHROUGH_FB:
		return "XR_ERROR_FEATURE_ALREADY_CREATED_PASSTHROUGH_FB";
	case XR_ERROR_FEATURE_REQUIRED_PASSTHROUGH_FB:
		return "XR_ERROR_FEATURE_REQUIRED_PASSTHROUGH_FB";
	case XR_ERROR_NOT_PERMITTED_PASSTHROUGH_FB:
		return "XR_ERROR_NOT_PERMITTED_PASSTHROUGH_FB";
	case XR_ERROR_INSUFFICIENT_RESOURCES_PASSTHROUGH_FB:
		return "XR_ERROR_INSUFFICIENT_RESOURCES_PASSTHROUGH_FB";
	case XR_ERROR_UNKNOWN_PASSTHROUGH_FB:
		return "XR_ERROR_UNKNOWN_PASSTHROUGH_FB";
	case XR_ERROR_RENDER_MODEL_KEY_INVALID_FB:
		return "XR_ERROR_RENDER_MODEL_KEY_INVALID_FB";
	case XR_RENDER_MODEL_UNAVAILABLE_FB:
		return "XR_RENDER_MODEL_UNAVAILABLE_FB";
	case XR_ERROR_MARKER_NOT_TRACKED_VARJO:
		return "XR_ERROR_MARKER_NOT_TRACKED_VARJO";
	case XR_ERROR_MARKER_ID_INVALID_VARJO:
		return "XR_ERROR_MARKER_ID_INVALID_VARJO";
	case XR_ERROR_SPATIAL_ANCHOR_NAME_NOT_FOUND_MSFT:
		return "XR_ERROR_SPATIAL_ANCHOR_NAME_NOT_FOUND_MSFT";
	case XR_ERROR_SPATIAL_ANCHOR_NAME_INVALID_MSFT:
		return "XR_ERROR_SPATIAL_ANCHOR_NAME_INVALID_MSFT";
	default:
		using BasicT = std::underlying_type_t<XrResult>;
		const auto basicValue = static_cast<BasicT>(value);
		return std::format("Unknown XrResult: {}", basicValue).c_str();
	}
}
} // namespace OXRTracing
#define OXRTL_ARGS_XrResult(x, name) \
	TraceLoggingValue(OXRTracing::ToCString(x), name)

namespace OXRTracing {
inline const char* ToCString(XrStructureType value)
{
	switch (value) {
	case XR_TYPE_UNKNOWN:
		return "XR_TYPE_UNKNOWN";
	case XR_TYPE_API_LAYER_PROPERTIES:
		return "XR_TYPE_API_LAYER_PROPERTIES";
	case XR_TYPE_EXTENSION_PROPERTIES:
		return "XR_TYPE_EXTENSION_PROPERTIES";
	case XR_TYPE_INSTANCE_CREATE_INFO:
		return "XR_TYPE_INSTANCE_CREATE_INFO";
	case XR_TYPE_SYSTEM_GET_INFO:
		return "XR_TYPE_SYSTEM_GET_INFO";
	case XR_TYPE_SYSTEM_PROPERTIES:
		return "XR_TYPE_SYSTEM_PROPERTIES";
	case XR_TYPE_VIEW_LOCATE_INFO:
		return "XR_TYPE_VIEW_LOCATE_INFO";
	case XR_TYPE_VIEW:
		return "XR_TYPE_VIEW";
	case XR_TYPE_SESSION_CREATE_INFO:
		return "XR_TYPE_SESSION_CREATE_INFO";
	case XR_TYPE_SWAPCHAIN_CREATE_INFO:
		return "XR_TYPE_SWAPCHAIN_CREATE_INFO";
	case XR_TYPE_SESSION_BEGIN_INFO:
		return "XR_TYPE_SESSION_BEGIN_INFO";
	case XR_TYPE_VIEW_STATE:
		return "XR_TYPE_VIEW_STATE";
	case XR_TYPE_FRAME_END_INFO:
		return "XR_TYPE_FRAME_END_INFO";
	case XR_TYPE_HAPTIC_VIBRATION:
		return "XR_TYPE_HAPTIC_VIBRATION";
	case XR_TYPE_EVENT_DATA_BUFFER:
		return "XR_TYPE_EVENT_DATA_BUFFER";
	case XR_TYPE_EVENT_DATA_INSTANCE_LOSS_PENDING:
		return "XR_TYPE_EVENT_DATA_INSTANCE_LOSS_PENDING";
	case XR_TYPE_EVENT_DATA_SESSION_STATE_CHANGED:
		return "XR_TYPE_EVENT_DATA_SESSION_STATE_CHANGED";
	case XR_TYPE_ACTION_STATE_BOOLEAN:
		return "XR_TYPE_ACTION_STATE_BOOLEAN";
	case XR_TYPE_ACTION_STATE_FLOAT:
		return "XR_TYPE_ACTION_STATE_FLOAT";
	case XR_TYPE_ACTION_STATE_VECTOR2F:
		return "XR_TYPE_ACTION_STATE_VECTOR2F";
	case XR_TYPE_ACTION_STATE_POSE:
		return "XR_TYPE_ACTION_STATE_POSE";
	case XR_TYPE_ACTION_SET_CREATE_INFO:
		return "XR_TYPE_ACTION_SET_CREATE_INFO";
	case XR_TYPE_ACTION_CREATE_INFO:
		return "XR_TYPE_ACTION_CREATE_INFO";
	case XR_TYPE_INSTANCE_PROPERTIES:
		return "XR_TYPE_INSTANCE_PROPERTIES";
	case XR_TYPE_FRAME_WAIT_INFO:
		return "XR_TYPE_FRAME_WAIT_INFO";
	case XR_TYPE_COMPOSITION_LAYER_PROJECTION:
		return "XR_TYPE_COMPOSITION_LAYER_PROJECTION";
	case XR_TYPE_COMPOSITION_LAYER_QUAD:
		return "XR_TYPE_COMPOSITION_LAYER_QUAD";
	case XR_TYPE_REFERENCE_SPACE_CREATE_INFO:
		return "XR_TYPE_REFERENCE_SPACE_CREATE_INFO";
	case XR_TYPE_ACTION_SPACE_CREATE_INFO:
		return "XR_TYPE_ACTION_SPACE_CREATE_INFO";
	case XR_TYPE_EVENT_DATA_REFERENCE_SPACE_CHANGE_PENDING:
		return "XR_TYPE_EVENT_DATA_REFERENCE_SPACE_CHANGE_PENDING";
	case XR_TYPE_VIEW_CONFIGURATION_VIEW:
		return "XR_TYPE_VIEW_CONFIGURATION_VIEW";
	case XR_TYPE_SPACE_LOCATION:
		return "XR_TYPE_SPACE_LOCATION";
	case XR_TYPE_SPACE_VELOCITY:
		return "XR_TYPE_SPACE_VELOCITY";
	case XR_TYPE_FRAME_STATE:
		return "XR_TYPE_FRAME_STATE";
	case XR_TYPE_VIEW_CONFIGURATION_PROPERTIES:
		return "XR_TYPE_VIEW_CONFIGURATION_PROPERTIES";
	case XR_TYPE_FRAME_BEGIN_INFO:
		return "XR_TYPE_FRAME_BEGIN_INFO";
	case XR_TYPE_COMPOSITION_LAYER_PROJECTION_VIEW:
		return "XR_TYPE_COMPOSITION_LAYER_PROJECTION_VIEW";
	case XR_TYPE_EVENT_DATA_EVENTS_LOST:
		return "XR_TYPE_EVENT_DATA_EVENTS_LOST";
	case XR_TYPE_INTERACTION_PROFILE_SUGGESTED_BINDING:
		return "XR_TYPE_INTERACTION_PROFILE_SUGGESTED_BINDING";
	case XR_TYPE_EVENT_DATA_INTERACTION_PROFILE_CHANGED:
		return "XR_TYPE_EVENT_DATA_INTERACTION_PROFILE_CHANGED";
	case XR_TYPE_INTERACTION_PROFILE_STATE:
		return "XR_TYPE_INTERACTION_PROFILE_STATE";
	case XR_TYPE_SWAPCHAIN_IMAGE_ACQUIRE_INFO:
		return "XR_TYPE_SWAPCHAIN_IMAGE_ACQUIRE_INFO";
	case XR_TYPE_SWAPCHAIN_IMAGE_WAIT_INFO:
		return "XR_TYPE_SWAPCHAIN_IMAGE_WAIT_INFO";
	case XR_TYPE_SWAPCHAIN_IMAGE_RELEASE_INFO:
		return "XR_TYPE_SWAPCHAIN_IMAGE_RELEASE_INFO";
	case XR_TYPE_ACTION_STATE_GET_INFO:
		return "XR_TYPE_ACTION_STATE_GET_INFO";
	case XR_TYPE_HAPTIC_ACTION_INFO:
		return "XR_TYPE_HAPTIC_ACTION_INFO";
	case XR_TYPE_SESSION_ACTION_SETS_ATTACH_INFO:
		return "XR_TYPE_SESSION_ACTION_SETS_ATTACH_INFO";
	case XR_TYPE_ACTIONS_SYNC_INFO:
		return "XR_TYPE_ACTIONS_SYNC_INFO";
	case XR_TYPE_BOUND_SOURCES_FOR_ACTION_ENUMERATE_INFO:
		return "XR_TYPE_BOUND_SOURCES_FOR_ACTION_ENUMERATE_INFO";
	case XR_TYPE_INPUT_SOURCE_LOCALIZED_NAME_GET_INFO:
		return "XR_TYPE_INPUT_SOURCE_LOCALIZED_NAME_GET_INFO";
	case XR_TYPE_COMPOSITION_LAYER_CUBE_KHR:
		return "XR_TYPE_COMPOSITION_LAYER_CUBE_KHR";
	case XR_TYPE_INSTANCE_CREATE_INFO_ANDROID_KHR:
		return "XR_TYPE_INSTANCE_CREATE_INFO_ANDROID_KHR";
	case XR_TYPE_COMPOSITION_LAYER_DEPTH_INFO_KHR:
		return "XR_TYPE_COMPOSITION_LAYER_DEPTH_INFO_KHR";
	case XR_TYPE_VULKAN_SWAPCHAIN_FORMAT_LIST_CREATE_INFO_KHR:
		return "XR_TYPE_VULKAN_SWAPCHAIN_FORMAT_LIST_CREATE_INFO_KHR";
	case XR_TYPE_EVENT_DATA_PERF_SETTINGS_EXT:
		return "XR_TYPE_EVENT_DATA_PERF_SETTINGS_EXT";
	case XR_TYPE_COMPOSITION_LAYER_CYLINDER_KHR:
		return "XR_TYPE_COMPOSITION_LAYER_CYLINDER_KHR";
	case XR_TYPE_COMPOSITION_LAYER_EQUIRECT_KHR:
		return "XR_TYPE_COMPOSITION_LAYER_EQUIRECT_KHR";
	case XR_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT:
		return "XR_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT";
	case XR_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT:
		return "XR_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT";
	case XR_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT:
		return "XR_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT";
	case XR_TYPE_DEBUG_UTILS_LABEL_EXT:
		return "XR_TYPE_DEBUG_UTILS_LABEL_EXT";
	case XR_TYPE_GRAPHICS_BINDING_OPENGL_WIN32_KHR:
		return "XR_TYPE_GRAPHICS_BINDING_OPENGL_WIN32_KHR";
	case XR_TYPE_GRAPHICS_BINDING_OPENGL_XLIB_KHR:
		return "XR_TYPE_GRAPHICS_BINDING_OPENGL_XLIB_KHR";
	case XR_TYPE_GRAPHICS_BINDING_OPENGL_XCB_KHR:
		return "XR_TYPE_GRAPHICS_BINDING_OPENGL_XCB_KHR";
	case XR_TYPE_GRAPHICS_BINDING_OPENGL_WAYLAND_KHR:
		return "XR_TYPE_GRAPHICS_BINDING_OPENGL_WAYLAND_KHR";
	case XR_TYPE_SWAPCHAIN_IMAGE_OPENGL_KHR:
		return "XR_TYPE_SWAPCHAIN_IMAGE_OPENGL_KHR";
	case XR_TYPE_GRAPHICS_REQUIREMENTS_OPENGL_KHR:
		return "XR_TYPE_GRAPHICS_REQUIREMENTS_OPENGL_KHR";
	case XR_TYPE_GRAPHICS_BINDING_OPENGL_ES_ANDROID_KHR:
		return "XR_TYPE_GRAPHICS_BINDING_OPENGL_ES_ANDROID_KHR";
	case XR_TYPE_SWAPCHAIN_IMAGE_OPENGL_ES_KHR:
		return "XR_TYPE_SWAPCHAIN_IMAGE_OPENGL_ES_KHR";
	case XR_TYPE_GRAPHICS_REQUIREMENTS_OPENGL_ES_KHR:
		return "XR_TYPE_GRAPHICS_REQUIREMENTS_OPENGL_ES_KHR";
	case XR_TYPE_GRAPHICS_BINDING_VULKAN_KHR:
		return "XR_TYPE_GRAPHICS_BINDING_VULKAN_KHR";
	case XR_TYPE_SWAPCHAIN_IMAGE_VULKAN_KHR:
		return "XR_TYPE_SWAPCHAIN_IMAGE_VULKAN_KHR";
	case XR_TYPE_GRAPHICS_REQUIREMENTS_VULKAN_KHR:
		return "XR_TYPE_GRAPHICS_REQUIREMENTS_VULKAN_KHR";
	case XR_TYPE_GRAPHICS_BINDING_D3D11_KHR:
		return "XR_TYPE_GRAPHICS_BINDING_D3D11_KHR";
	case XR_TYPE_SWAPCHAIN_IMAGE_D3D11_KHR:
		return "XR_TYPE_SWAPCHAIN_IMAGE_D3D11_KHR";
	case XR_TYPE_GRAPHICS_REQUIREMENTS_D3D11_KHR:
		return "XR_TYPE_GRAPHICS_REQUIREMENTS_D3D11_KHR";
	case XR_TYPE_GRAPHICS_BINDING_D3D12_KHR:
		return "XR_TYPE_GRAPHICS_BINDING_D3D12_KHR";
	case XR_TYPE_SWAPCHAIN_IMAGE_D3D12_KHR:
		return "XR_TYPE_SWAPCHAIN_IMAGE_D3D12_KHR";
	case XR_TYPE_GRAPHICS_REQUIREMENTS_D3D12_KHR:
		return "XR_TYPE_GRAPHICS_REQUIREMENTS_D3D12_KHR";
	case XR_TYPE_SYSTEM_EYE_GAZE_INTERACTION_PROPERTIES_EXT:
		return "XR_TYPE_SYSTEM_EYE_GAZE_INTERACTION_PROPERTIES_EXT";
	case XR_TYPE_EYE_GAZE_SAMPLE_TIME_EXT:
		return "XR_TYPE_EYE_GAZE_SAMPLE_TIME_EXT";
	case XR_TYPE_VISIBILITY_MASK_KHR:
		return "XR_TYPE_VISIBILITY_MASK_KHR";
	case XR_TYPE_EVENT_DATA_VISIBILITY_MASK_CHANGED_KHR:
		return "XR_TYPE_EVENT_DATA_VISIBILITY_MASK_CHANGED_KHR";
	case XR_TYPE_SESSION_CREATE_INFO_OVERLAY_EXTX:
		return "XR_TYPE_SESSION_CREATE_INFO_OVERLAY_EXTX";
	case XR_TYPE_EVENT_DATA_MAIN_SESSION_VISIBILITY_CHANGED_EXTX:
		return "XR_TYPE_EVENT_DATA_MAIN_SESSION_VISIBILITY_CHANGED_EXTX";
	case XR_TYPE_COMPOSITION_LAYER_COLOR_SCALE_BIAS_KHR:
		return "XR_TYPE_COMPOSITION_LAYER_COLOR_SCALE_BIAS_KHR";
	case XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_MSFT:
		return "XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_MSFT";
	case XR_TYPE_SPATIAL_ANCHOR_SPACE_CREATE_INFO_MSFT:
		return "XR_TYPE_SPATIAL_ANCHOR_SPACE_CREATE_INFO_MSFT";
	case XR_TYPE_COMPOSITION_LAYER_IMAGE_LAYOUT_FB:
		return "XR_TYPE_COMPOSITION_LAYER_IMAGE_LAYOUT_FB";
	case XR_TYPE_COMPOSITION_LAYER_ALPHA_BLEND_FB:
		return "XR_TYPE_COMPOSITION_LAYER_ALPHA_BLEND_FB";
	case XR_TYPE_VIEW_CONFIGURATION_DEPTH_RANGE_EXT:
		return "XR_TYPE_VIEW_CONFIGURATION_DEPTH_RANGE_EXT";
	case XR_TYPE_GRAPHICS_BINDING_EGL_MNDX:
		return "XR_TYPE_GRAPHICS_BINDING_EGL_MNDX";
	case XR_TYPE_SPATIAL_GRAPH_NODE_SPACE_CREATE_INFO_MSFT:
		return "XR_TYPE_SPATIAL_GRAPH_NODE_SPACE_CREATE_INFO_MSFT";
	case XR_TYPE_SPATIAL_GRAPH_STATIC_NODE_BINDING_CREATE_INFO_MSFT:
		return "XR_TYPE_SPATIAL_GRAPH_STATIC_NODE_BINDING_CREATE_INFO_MSFT";
	case XR_TYPE_SPATIAL_GRAPH_NODE_BINDING_PROPERTIES_GET_INFO_MSFT:
		return "XR_TYPE_SPATIAL_GRAPH_NODE_BINDING_PROPERTIES_GET_INFO_MSFT";
	case XR_TYPE_SPATIAL_GRAPH_NODE_BINDING_PROPERTIES_MSFT:
		return "XR_TYPE_SPATIAL_GRAPH_NODE_BINDING_PROPERTIES_MSFT";
	case XR_TYPE_SYSTEM_HAND_TRACKING_PROPERTIES_EXT:
		return "XR_TYPE_SYSTEM_HAND_TRACKING_PROPERTIES_EXT";
	case XR_TYPE_HAND_TRACKER_CREATE_INFO_EXT:
		return "XR_TYPE_HAND_TRACKER_CREATE_INFO_EXT";
	case XR_TYPE_HAND_JOINTS_LOCATE_INFO_EXT:
		return "XR_TYPE_HAND_JOINTS_LOCATE_INFO_EXT";
	case XR_TYPE_HAND_JOINT_LOCATIONS_EXT:
		return "XR_TYPE_HAND_JOINT_LOCATIONS_EXT";
	case XR_TYPE_HAND_JOINT_VELOCITIES_EXT:
		return "XR_TYPE_HAND_JOINT_VELOCITIES_EXT";
	case XR_TYPE_SYSTEM_HAND_TRACKING_MESH_PROPERTIES_MSFT:
		return "XR_TYPE_SYSTEM_HAND_TRACKING_MESH_PROPERTIES_MSFT";
	case XR_TYPE_HAND_MESH_SPACE_CREATE_INFO_MSFT:
		return "XR_TYPE_HAND_MESH_SPACE_CREATE_INFO_MSFT";
	case XR_TYPE_HAND_MESH_UPDATE_INFO_MSFT:
		return "XR_TYPE_HAND_MESH_UPDATE_INFO_MSFT";
	case XR_TYPE_HAND_MESH_MSFT:
		return "XR_TYPE_HAND_MESH_MSFT";
	case XR_TYPE_HAND_POSE_TYPE_INFO_MSFT:
		return "XR_TYPE_HAND_POSE_TYPE_INFO_MSFT";
	case XR_TYPE_SECONDARY_VIEW_CONFIGURATION_SESSION_BEGIN_INFO_MSFT:
		return "XR_TYPE_SECONDARY_VIEW_CONFIGURATION_SESSION_BEGIN_INFO_MSFT";
	case XR_TYPE_SECONDARY_VIEW_CONFIGURATION_STATE_MSFT:
		return "XR_TYPE_SECONDARY_VIEW_CONFIGURATION_STATE_MSFT";
	case XR_TYPE_SECONDARY_VIEW_CONFIGURATION_FRAME_STATE_MSFT:
		return "XR_TYPE_SECONDARY_VIEW_CONFIGURATION_FRAME_STATE_MSFT";
	case XR_TYPE_SECONDARY_VIEW_CONFIGURATION_FRAME_END_INFO_MSFT:
		return "XR_TYPE_SECONDARY_VIEW_CONFIGURATION_FRAME_END_INFO_MSFT";
	case XR_TYPE_SECONDARY_VIEW_CONFIGURATION_LAYER_INFO_MSFT:
		return "XR_TYPE_SECONDARY_VIEW_CONFIGURATION_LAYER_INFO_MSFT";
	case XR_TYPE_SECONDARY_VIEW_CONFIGURATION_SWAPCHAIN_CREATE_INFO_MSFT:
		return "XR_TYPE_SECONDARY_VIEW_CONFIGURATION_SWAPCHAIN_CREATE_INFO_"
		       "MSFT";
	case XR_TYPE_CONTROLLER_MODEL_KEY_STATE_MSFT:
		return "XR_TYPE_CONTROLLER_MODEL_KEY_STATE_MSFT";
	case XR_TYPE_CONTROLLER_MODEL_NODE_PROPERTIES_MSFT:
		return "XR_TYPE_CONTROLLER_MODEL_NODE_PROPERTIES_MSFT";
	case XR_TYPE_CONTROLLER_MODEL_PROPERTIES_MSFT:
		return "XR_TYPE_CONTROLLER_MODEL_PROPERTIES_MSFT";
	case XR_TYPE_CONTROLLER_MODEL_NODE_STATE_MSFT:
		return "XR_TYPE_CONTROLLER_MODEL_NODE_STATE_MSFT";
	case XR_TYPE_CONTROLLER_MODEL_STATE_MSFT:
		return "XR_TYPE_CONTROLLER_MODEL_STATE_MSFT";
	case XR_TYPE_VIEW_CONFIGURATION_VIEW_FOV_EPIC:
		return "XR_TYPE_VIEW_CONFIGURATION_VIEW_FOV_EPIC";
	case XR_TYPE_HOLOGRAPHIC_WINDOW_ATTACHMENT_MSFT:
		return "XR_TYPE_HOLOGRAPHIC_WINDOW_ATTACHMENT_MSFT";
	case XR_TYPE_COMPOSITION_LAYER_REPROJECTION_INFO_MSFT:
		return "XR_TYPE_COMPOSITION_LAYER_REPROJECTION_INFO_MSFT";
	case XR_TYPE_COMPOSITION_LAYER_REPROJECTION_PLANE_OVERRIDE_MSFT:
		return "XR_TYPE_COMPOSITION_LAYER_REPROJECTION_PLANE_OVERRIDE_MSFT";
	case XR_TYPE_ANDROID_SURFACE_SWAPCHAIN_CREATE_INFO_FB:
		return "XR_TYPE_ANDROID_SURFACE_SWAPCHAIN_CREATE_INFO_FB";
	case XR_TYPE_COMPOSITION_LAYER_SECURE_CONTENT_FB:
		return "XR_TYPE_COMPOSITION_LAYER_SECURE_CONTENT_FB";
	case XR_TYPE_INTERACTION_PROFILE_DPAD_BINDING_EXT:
		return "XR_TYPE_INTERACTION_PROFILE_DPAD_BINDING_EXT";
	case XR_TYPE_INTERACTION_PROFILE_ANALOG_THRESHOLD_VALVE:
		return "XR_TYPE_INTERACTION_PROFILE_ANALOG_THRESHOLD_VALVE";
	case XR_TYPE_HAND_JOINTS_MOTION_RANGE_INFO_EXT:
		return "XR_TYPE_HAND_JOINTS_MOTION_RANGE_INFO_EXT";
	case XR_TYPE_LOADER_INIT_INFO_ANDROID_KHR:
		return "XR_TYPE_LOADER_INIT_INFO_ANDROID_KHR";
	case XR_TYPE_VULKAN_INSTANCE_CREATE_INFO_KHR:
		return "XR_TYPE_VULKAN_INSTANCE_CREATE_INFO_KHR";
	case XR_TYPE_VULKAN_DEVICE_CREATE_INFO_KHR:
		return "XR_TYPE_VULKAN_DEVICE_CREATE_INFO_KHR";
	case XR_TYPE_VULKAN_GRAPHICS_DEVICE_GET_INFO_KHR:
		return "XR_TYPE_VULKAN_GRAPHICS_DEVICE_GET_INFO_KHR";
	case XR_TYPE_COMPOSITION_LAYER_EQUIRECT2_KHR:
		return "XR_TYPE_COMPOSITION_LAYER_EQUIRECT2_KHR";
	case XR_TYPE_SCENE_OBSERVER_CREATE_INFO_MSFT:
		return "XR_TYPE_SCENE_OBSERVER_CREATE_INFO_MSFT";
	case XR_TYPE_SCENE_CREATE_INFO_MSFT:
		return "XR_TYPE_SCENE_CREATE_INFO_MSFT";
	case XR_TYPE_NEW_SCENE_COMPUTE_INFO_MSFT:
		return "XR_TYPE_NEW_SCENE_COMPUTE_INFO_MSFT";
	case XR_TYPE_VISUAL_MESH_COMPUTE_LOD_INFO_MSFT:
		return "XR_TYPE_VISUAL_MESH_COMPUTE_LOD_INFO_MSFT";
	case XR_TYPE_SCENE_COMPONENTS_MSFT:
		return "XR_TYPE_SCENE_COMPONENTS_MSFT";
	case XR_TYPE_SCENE_COMPONENTS_GET_INFO_MSFT:
		return "XR_TYPE_SCENE_COMPONENTS_GET_INFO_MSFT";
	case XR_TYPE_SCENE_COMPONENT_LOCATIONS_MSFT:
		return "XR_TYPE_SCENE_COMPONENT_LOCATIONS_MSFT";
	case XR_TYPE_SCENE_COMPONENTS_LOCATE_INFO_MSFT:
		return "XR_TYPE_SCENE_COMPONENTS_LOCATE_INFO_MSFT";
	case XR_TYPE_SCENE_OBJECTS_MSFT:
		return "XR_TYPE_SCENE_OBJECTS_MSFT";
	case XR_TYPE_SCENE_COMPONENT_PARENT_FILTER_INFO_MSFT:
		return "XR_TYPE_SCENE_COMPONENT_PARENT_FILTER_INFO_MSFT";
	case XR_TYPE_SCENE_OBJECT_TYPES_FILTER_INFO_MSFT:
		return "XR_TYPE_SCENE_OBJECT_TYPES_FILTER_INFO_MSFT";
	case XR_TYPE_SCENE_PLANES_MSFT:
		return "XR_TYPE_SCENE_PLANES_MSFT";
	case XR_TYPE_SCENE_PLANE_ALIGNMENT_FILTER_INFO_MSFT:
		return "XR_TYPE_SCENE_PLANE_ALIGNMENT_FILTER_INFO_MSFT";
	case XR_TYPE_SCENE_MESHES_MSFT:
		return "XR_TYPE_SCENE_MESHES_MSFT";
	case XR_TYPE_SCENE_MESH_BUFFERS_GET_INFO_MSFT:
		return "XR_TYPE_SCENE_MESH_BUFFERS_GET_INFO_MSFT";
	case XR_TYPE_SCENE_MESH_BUFFERS_MSFT:
		return "XR_TYPE_SCENE_MESH_BUFFERS_MSFT";
	case XR_TYPE_SCENE_MESH_VERTEX_BUFFER_MSFT:
		return "XR_TYPE_SCENE_MESH_VERTEX_BUFFER_MSFT";
	case XR_TYPE_SCENE_MESH_INDICES_UINT32_MSFT:
		return "XR_TYPE_SCENE_MESH_INDICES_UINT32_MSFT";
	case XR_TYPE_SCENE_MESH_INDICES_UINT16_MSFT:
		return "XR_TYPE_SCENE_MESH_INDICES_UINT16_MSFT";
	case XR_TYPE_SERIALIZED_SCENE_FRAGMENT_DATA_GET_INFO_MSFT:
		return "XR_TYPE_SERIALIZED_SCENE_FRAGMENT_DATA_GET_INFO_MSFT";
	case XR_TYPE_SCENE_DESERIALIZE_INFO_MSFT:
		return "XR_TYPE_SCENE_DESERIALIZE_INFO_MSFT";
	case XR_TYPE_EVENT_DATA_DISPLAY_REFRESH_RATE_CHANGED_FB:
		return "XR_TYPE_EVENT_DATA_DISPLAY_REFRESH_RATE_CHANGED_FB";
	case XR_TYPE_VIVE_TRACKER_PATHS_HTCX:
		return "XR_TYPE_VIVE_TRACKER_PATHS_HTCX";
	case XR_TYPE_EVENT_DATA_VIVE_TRACKER_CONNECTED_HTCX:
		return "XR_TYPE_EVENT_DATA_VIVE_TRACKER_CONNECTED_HTCX";
	case XR_TYPE_SYSTEM_FACIAL_TRACKING_PROPERTIES_HTC:
		return "XR_TYPE_SYSTEM_FACIAL_TRACKING_PROPERTIES_HTC";
	case XR_TYPE_FACIAL_TRACKER_CREATE_INFO_HTC:
		return "XR_TYPE_FACIAL_TRACKER_CREATE_INFO_HTC";
	case XR_TYPE_FACIAL_EXPRESSIONS_HTC:
		return "XR_TYPE_FACIAL_EXPRESSIONS_HTC";
	case XR_TYPE_SYSTEM_COLOR_SPACE_PROPERTIES_FB:
		return "XR_TYPE_SYSTEM_COLOR_SPACE_PROPERTIES_FB";
	case XR_TYPE_HAND_TRACKING_MESH_FB:
		return "XR_TYPE_HAND_TRACKING_MESH_FB";
	case XR_TYPE_HAND_TRACKING_SCALE_FB:
		return "XR_TYPE_HAND_TRACKING_SCALE_FB";
	case XR_TYPE_HAND_TRACKING_AIM_STATE_FB:
		return "XR_TYPE_HAND_TRACKING_AIM_STATE_FB";
	case XR_TYPE_HAND_TRACKING_CAPSULES_STATE_FB:
		return "XR_TYPE_HAND_TRACKING_CAPSULES_STATE_FB";
	case XR_TYPE_SYSTEM_SPATIAL_ENTITY_PROPERTIES_FB:
		return "XR_TYPE_SYSTEM_SPATIAL_ENTITY_PROPERTIES_FB";
	case XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_FB:
		return "XR_TYPE_SPATIAL_ANCHOR_CREATE_INFO_FB";
	case XR_TYPE_SPACE_COMPONENT_STATUS_SET_INFO_FB:
		return "XR_TYPE_SPACE_COMPONENT_STATUS_SET_INFO_FB";
	case XR_TYPE_SPACE_COMPONENT_STATUS_FB:
		return "XR_TYPE_SPACE_COMPONENT_STATUS_FB";
	case XR_TYPE_EVENT_DATA_SPATIAL_ANCHOR_CREATE_COMPLETE_FB:
		return "XR_TYPE_EVENT_DATA_SPATIAL_ANCHOR_CREATE_COMPLETE_FB";
	case XR_TYPE_EVENT_DATA_SPACE_SET_STATUS_COMPLETE_FB:
		return "XR_TYPE_EVENT_DATA_SPACE_SET_STATUS_COMPLETE_FB";
	case XR_TYPE_FOVEATION_PROFILE_CREATE_INFO_FB:
		return "XR_TYPE_FOVEATION_PROFILE_CREATE_INFO_FB";
	case XR_TYPE_SWAPCHAIN_CREATE_INFO_FOVEATION_FB:
		return "XR_TYPE_SWAPCHAIN_CREATE_INFO_FOVEATION_FB";
	case XR_TYPE_SWAPCHAIN_STATE_FOVEATION_FB:
		return "XR_TYPE_SWAPCHAIN_STATE_FOVEATION_FB";
	case XR_TYPE_FOVEATION_LEVEL_PROFILE_CREATE_INFO_FB:
		return "XR_TYPE_FOVEATION_LEVEL_PROFILE_CREATE_INFO_FB";
	case XR_TYPE_KEYBOARD_SPACE_CREATE_INFO_FB:
		return "XR_TYPE_KEYBOARD_SPACE_CREATE_INFO_FB";
	case XR_TYPE_KEYBOARD_TRACKING_QUERY_FB:
		return "XR_TYPE_KEYBOARD_TRACKING_QUERY_FB";
	case XR_TYPE_SYSTEM_KEYBOARD_TRACKING_PROPERTIES_FB:
		return "XR_TYPE_SYSTEM_KEYBOARD_TRACKING_PROPERTIES_FB";
	case XR_TYPE_TRIANGLE_MESH_CREATE_INFO_FB:
		return "XR_TYPE_TRIANGLE_MESH_CREATE_INFO_FB";
	case XR_TYPE_SYSTEM_PASSTHROUGH_PROPERTIES_FB:
		return "XR_TYPE_SYSTEM_PASSTHROUGH_PROPERTIES_FB";
	case XR_TYPE_PASSTHROUGH_CREATE_INFO_FB:
		return "XR_TYPE_PASSTHROUGH_CREATE_INFO_FB";
	case XR_TYPE_PASSTHROUGH_LAYER_CREATE_INFO_FB:
		return "XR_TYPE_PASSTHROUGH_LAYER_CREATE_INFO_FB";
	case XR_TYPE_COMPOSITION_LAYER_PASSTHROUGH_FB:
		return "XR_TYPE_COMPOSITION_LAYER_PASSTHROUGH_FB";
	case XR_TYPE_GEOMETRY_INSTANCE_CREATE_INFO_FB:
		return "XR_TYPE_GEOMETRY_INSTANCE_CREATE_INFO_FB";
	case XR_TYPE_GEOMETRY_INSTANCE_TRANSFORM_FB:
		return "XR_TYPE_GEOMETRY_INSTANCE_TRANSFORM_FB";
	case XR_TYPE_SYSTEM_PASSTHROUGH_PROPERTIES2_FB:
		return "XR_TYPE_SYSTEM_PASSTHROUGH_PROPERTIES2_FB";
	case XR_TYPE_PASSTHROUGH_STYLE_FB:
		return "XR_TYPE_PASSTHROUGH_STYLE_FB";
	case XR_TYPE_PASSTHROUGH_COLOR_MAP_MONO_TO_RGBA_FB:
		return "XR_TYPE_PASSTHROUGH_COLOR_MAP_MONO_TO_RGBA_FB";
	case XR_TYPE_PASSTHROUGH_COLOR_MAP_MONO_TO_MONO_FB:
		return "XR_TYPE_PASSTHROUGH_COLOR_MAP_MONO_TO_MONO_FB";
	case XR_TYPE_PASSTHROUGH_BRIGHTNESS_CONTRAST_SATURATION_FB:
		return "XR_TYPE_PASSTHROUGH_BRIGHTNESS_CONTRAST_SATURATION_FB";
	case XR_TYPE_EVENT_DATA_PASSTHROUGH_STATE_CHANGED_FB:
		return "XR_TYPE_EVENT_DATA_PASSTHROUGH_STATE_CHANGED_FB";
	case XR_TYPE_RENDER_MODEL_PATH_INFO_FB:
		return "XR_TYPE_RENDER_MODEL_PATH_INFO_FB";
	case XR_TYPE_RENDER_MODEL_PROPERTIES_FB:
		return "XR_TYPE_RENDER_MODEL_PROPERTIES_FB";
	case XR_TYPE_RENDER_MODEL_BUFFER_FB:
		return "XR_TYPE_RENDER_MODEL_BUFFER_FB";
	case XR_TYPE_RENDER_MODEL_LOAD_INFO_FB:
		return "XR_TYPE_RENDER_MODEL_LOAD_INFO_FB";
	case XR_TYPE_SYSTEM_RENDER_MODEL_PROPERTIES_FB:
		return "XR_TYPE_SYSTEM_RENDER_MODEL_PROPERTIES_FB";
	case XR_TYPE_RENDER_MODEL_CAPABILITIES_REQUEST_FB:
		return "XR_TYPE_RENDER_MODEL_CAPABILITIES_REQUEST_FB";
	case XR_TYPE_BINDING_MODIFICATIONS_KHR:
		return "XR_TYPE_BINDING_MODIFICATIONS_KHR";
	case XR_TYPE_VIEW_LOCATE_FOVEATED_RENDERING_VARJO:
		return "XR_TYPE_VIEW_LOCATE_FOVEATED_RENDERING_VARJO";
	case XR_TYPE_FOVEATED_VIEW_CONFIGURATION_VIEW_VARJO:
		return "XR_TYPE_FOVEATED_VIEW_CONFIGURATION_VIEW_VARJO";
	case XR_TYPE_SYSTEM_FOVEATED_RENDERING_PROPERTIES_VARJO:
		return "XR_TYPE_SYSTEM_FOVEATED_RENDERING_PROPERTIES_VARJO";
	case XR_TYPE_COMPOSITION_LAYER_DEPTH_TEST_VARJO:
		return "XR_TYPE_COMPOSITION_LAYER_DEPTH_TEST_VARJO";
	case XR_TYPE_SYSTEM_MARKER_TRACKING_PROPERTIES_VARJO:
		return "XR_TYPE_SYSTEM_MARKER_TRACKING_PROPERTIES_VARJO";
	case XR_TYPE_EVENT_DATA_MARKER_TRACKING_UPDATE_VARJO:
		return "XR_TYPE_EVENT_DATA_MARKER_TRACKING_UPDATE_VARJO";
	case XR_TYPE_MARKER_SPACE_CREATE_INFO_VARJO:
		return "XR_TYPE_MARKER_SPACE_CREATE_INFO_VARJO";
	case XR_TYPE_SPATIAL_ANCHOR_PERSISTENCE_INFO_MSFT:
		return "XR_TYPE_SPATIAL_ANCHOR_PERSISTENCE_INFO_MSFT";
	case XR_TYPE_SPATIAL_ANCHOR_FROM_PERSISTED_ANCHOR_CREATE_INFO_MSFT:
		return "XR_TYPE_SPATIAL_ANCHOR_FROM_PERSISTED_ANCHOR_CREATE_INFO_MSFT";
	case XR_TYPE_SPACE_QUERY_INFO_FB:
		return "XR_TYPE_SPACE_QUERY_INFO_FB";
	case XR_TYPE_SPACE_QUERY_RESULTS_FB:
		return "XR_TYPE_SPACE_QUERY_RESULTS_FB";
	case XR_TYPE_SPACE_STORAGE_LOCATION_FILTER_INFO_FB:
		return "XR_TYPE_SPACE_STORAGE_LOCATION_FILTER_INFO_FB";
	case XR_TYPE_SPACE_UUID_FILTER_INFO_FB:
		return "XR_TYPE_SPACE_UUID_FILTER_INFO_FB";
	case XR_TYPE_SPACE_COMPONENT_FILTER_INFO_FB:
		return "XR_TYPE_SPACE_COMPONENT_FILTER_INFO_FB";
	case XR_TYPE_EVENT_DATA_SPACE_QUERY_RESULTS_AVAILABLE_FB:
		return "XR_TYPE_EVENT_DATA_SPACE_QUERY_RESULTS_AVAILABLE_FB";
	case XR_TYPE_EVENT_DATA_SPACE_QUERY_COMPLETE_FB:
		return "XR_TYPE_EVENT_DATA_SPACE_QUERY_COMPLETE_FB";
	case XR_TYPE_SPACE_SAVE_INFO_FB:
		return "XR_TYPE_SPACE_SAVE_INFO_FB";
	case XR_TYPE_SPACE_ERASE_INFO_FB:
		return "XR_TYPE_SPACE_ERASE_INFO_FB";
	case XR_TYPE_EVENT_DATA_SPACE_SAVE_COMPLETE_FB:
		return "XR_TYPE_EVENT_DATA_SPACE_SAVE_COMPLETE_FB";
	case XR_TYPE_EVENT_DATA_SPACE_ERASE_COMPLETE_FB:
		return "XR_TYPE_EVENT_DATA_SPACE_ERASE_COMPLETE_FB";
	case XR_TYPE_SWAPCHAIN_IMAGE_FOVEATION_VULKAN_FB:
		return "XR_TYPE_SWAPCHAIN_IMAGE_FOVEATION_VULKAN_FB";
	case XR_TYPE_SWAPCHAIN_STATE_ANDROID_SURFACE_DIMENSIONS_FB:
		return "XR_TYPE_SWAPCHAIN_STATE_ANDROID_SURFACE_DIMENSIONS_FB";
	case XR_TYPE_SWAPCHAIN_STATE_SAMPLER_OPENGL_ES_FB:
		return "XR_TYPE_SWAPCHAIN_STATE_SAMPLER_OPENGL_ES_FB";
	case XR_TYPE_SWAPCHAIN_STATE_SAMPLER_VULKAN_FB:
		return "XR_TYPE_SWAPCHAIN_STATE_SAMPLER_VULKAN_FB";
	case XR_TYPE_COMPOSITION_LAYER_SPACE_WARP_INFO_FB:
		return "XR_TYPE_COMPOSITION_LAYER_SPACE_WARP_INFO_FB";
	case XR_TYPE_SYSTEM_SPACE_WARP_PROPERTIES_FB:
		return "XR_TYPE_SYSTEM_SPACE_WARP_PROPERTIES_FB";
	case XR_TYPE_SEMANTIC_LABELS_FB:
		return "XR_TYPE_SEMANTIC_LABELS_FB";
	case XR_TYPE_ROOM_LAYOUT_FB:
		return "XR_TYPE_ROOM_LAYOUT_FB";
	case XR_TYPE_BOUNDARY_2D_FB:
		return "XR_TYPE_BOUNDARY_2D_FB";
	case XR_TYPE_DIGITAL_LENS_CONTROL_ALMALENCE:
		return "XR_TYPE_DIGITAL_LENS_CONTROL_ALMALENCE";
	case XR_TYPE_SPACE_CONTAINER_FB:
		return "XR_TYPE_SPACE_CONTAINER_FB";
	case XR_TYPE_PASSTHROUGH_KEYBOARD_HANDS_INTENSITY_FB:
		return "XR_TYPE_PASSTHROUGH_KEYBOARD_HANDS_INTENSITY_FB";
	case XR_TYPE_COMPOSITION_LAYER_SETTINGS_FB:
		return "XR_TYPE_COMPOSITION_LAYER_SETTINGS_FB";
	case XR_TYPE_VULKAN_SWAPCHAIN_CREATE_INFO_META:
		return "XR_TYPE_VULKAN_SWAPCHAIN_CREATE_INFO_META";
	case XR_TYPE_PERFORMANCE_METRICS_STATE_META:
		return "XR_TYPE_PERFORMANCE_METRICS_STATE_META";
	case XR_TYPE_PERFORMANCE_METRICS_COUNTER_META:
		return "XR_TYPE_PERFORMANCE_METRICS_COUNTER_META";
	case XR_TYPE_SYSTEM_HEADSET_ID_PROPERTIES_META:
		return "XR_TYPE_SYSTEM_HEADSET_ID_PROPERTIES_META";
	case XR_TYPE_PASSTHROUGH_CREATE_INFO_HTC:
		return "XR_TYPE_PASSTHROUGH_CREATE_INFO_HTC";
	case XR_TYPE_PASSTHROUGH_COLOR_HTC:
		return "XR_TYPE_PASSTHROUGH_COLOR_HTC";
	case XR_TYPE_PASSTHROUGH_MESH_TRANSFORM_INFO_HTC:
		return "XR_TYPE_PASSTHROUGH_MESH_TRANSFORM_INFO_HTC";
	case XR_TYPE_COMPOSITION_LAYER_PASSTHROUGH_HTC:
		return "XR_TYPE_COMPOSITION_LAYER_PASSTHROUGH_HTC";
	case XR_TYPE_FOVEATION_APPLY_INFO_HTC:
		return "XR_TYPE_FOVEATION_APPLY_INFO_HTC";
	case XR_TYPE_FOVEATION_DYNAMIC_MODE_INFO_HTC:
		return "XR_TYPE_FOVEATION_DYNAMIC_MODE_INFO_HTC";
	case XR_TYPE_FOVEATION_CUSTOM_MODE_INFO_HTC:
		return "XR_TYPE_FOVEATION_CUSTOM_MODE_INFO_HTC";
	case XR_TYPE_ACTIVE_ACTION_SET_PRIORITIES_EXT:
		return "XR_TYPE_ACTIVE_ACTION_SET_PRIORITIES_EXT";
	default:
		using BasicT = std::underlying_type_t<XrStructureType>;
		const auto basicValue = static_cast<BasicT>(value);
		return std::format("Unknown XrStructureType: {}", basicValue).c_str();
	}
}
} // namespace OXRTracing
#define OXRTL_ARGS_XrStructureType(x, name) \
	TraceLoggingValue(OXRTracing::ToCString(x), name)

namespace OXRTracing {
inline const char* ToCString(XrFormFactor value)
{
	switch (value) {
	case XR_FORM_FACTOR_HEAD_MOUNTED_DISPLAY:
		return "XR_FORM_FACTOR_HEAD_MOUNTED_DISPLAY";
	case XR_FORM_FACTOR_HANDHELD_DISPLAY:
		return "XR_FORM_FACTOR_HANDHELD_DISPLAY";
	default:
		using BasicT = std::underlying_type_t<XrFormFactor>;
		const auto basicValue = static_cast<BasicT>(value);
		return std::format("Unknown XrFormFactor: {}", basicValue).c_str();
	}
}
} // namespace OXRTracing
#define OXRTL_ARGS_XrFormFactor(x, name) \
	TraceLoggingValue(OXRTracing::ToCString(x), name)

namespace OXRTracing {
inline const char* ToCString(XrViewConfigurationType value)
{
	switch (value) {
	case XR_VIEW_CONFIGURATION_TYPE_PRIMARY_MONO:
		return "XR_VIEW_CONFIGURATION_TYPE_PRIMARY_MONO";
	case XR_VIEW_CONFIGURATION_TYPE_PRIMARY_STEREO:
		return "XR_VIEW_CONFIGURATION_TYPE_PRIMARY_STEREO";
	case XR_VIEW_CONFIGURATION_TYPE_PRIMARY_QUAD_VARJO:
		return "XR_VIEW_CONFIGURATION_TYPE_PRIMARY_QUAD_VARJO";
	case XR_VIEW_CONFIGURATION_TYPE_SECONDARY_MONO_FIRST_PERSON_OBSERVER_MSFT:
		return "XR_VIEW_CONFIGURATION_TYPE_SECONDARY_MONO_FIRST_PERSON_"
		       "OBSERVER_MSFT";
	default:
		using BasicT = std::underlying_type_t<XrViewConfigurationType>;
		const auto basicValue = static_cast<BasicT>(value);
		return std::format("Unknown XrViewConfigurationType: {}", basicValue)
		    .c_str();
	}
}
} // namespace OXRTracing
#define OXRTL_ARGS_XrViewConfigurationType(x, name) \
	TraceLoggingValue(OXRTracing::ToCString(x), name)

namespace OXRTracing {
inline const char* ToCString(XrEnvironmentBlendMode value)
{
	switch (value) {
	case XR_ENVIRONMENT_BLEND_MODE_OPAQUE:
		return "XR_ENVIRONMENT_BLEND_MODE_OPAQUE";
	case XR_ENVIRONMENT_BLEND_MODE_ADDITIVE:
		return "XR_ENVIRONMENT_BLEND_MODE_ADDITIVE";
	case XR_ENVIRONMENT_BLEND_MODE_ALPHA_BLEND:
		return "XR_ENVIRONMENT_BLEND_MODE_ALPHA_BLEND";
	default:
		using BasicT = std::underlying_type_t<XrEnvironmentBlendMode>;
		const auto basicValue = static_cast<BasicT>(value);
		return std::format("Unknown XrEnvironmentBlendMode: {}", basicValue)
		    .c_str();
	}
}
} // namespace OXRTracing
#define OXRTL_ARGS_XrEnvironmentBlendMode(x, name) \
	TraceLoggingValue(OXRTracing::ToCString(x), name)

namespace OXRTracing {
inline const char* ToCString(XrReferenceSpaceType value)
{
	switch (value) {
	case XR_REFERENCE_SPACE_TYPE_VIEW:
		return "XR_REFERENCE_SPACE_TYPE_VIEW";
	case XR_REFERENCE_SPACE_TYPE_LOCAL:
		return "XR_REFERENCE_SPACE_TYPE_LOCAL";
	case XR_REFERENCE_SPACE_TYPE_STAGE:
		return "XR_REFERENCE_SPACE_TYPE_STAGE";
	case XR_REFERENCE_SPACE_TYPE_UNBOUNDED_MSFT:
		return "XR_REFERENCE_SPACE_TYPE_UNBOUNDED_MSFT";
	case XR_REFERENCE_SPACE_TYPE_COMBINED_EYE_VARJO:
		return "XR_REFERENCE_SPACE_TYPE_COMBINED_EYE_VARJO";
	default:
		using BasicT = std::underlying_type_t<XrReferenceSpaceType>;
		const auto basicValue = static_cast<BasicT>(value);
		return std::format("Unknown XrReferenceSpaceType: {}", basicValue)
		    .c_str();
	}
}
} // namespace OXRTracing
#define OXRTL_ARGS_XrReferenceSpaceType(x, name) \
	TraceLoggingValue(OXRTracing::ToCString(x), name)

namespace OXRTracing {
inline const char* ToCString(XrActionType value)
{
	switch (value) {
	case XR_ACTION_TYPE_BOOLEAN_INPUT:
		return "XR_ACTION_TYPE_BOOLEAN_INPUT";
	case XR_ACTION_TYPE_FLOAT_INPUT:
		return "XR_ACTION_TYPE_FLOAT_INPUT";
	case XR_ACTION_TYPE_VECTOR2F_INPUT:
		return "XR_ACTION_TYPE_VECTOR2F_INPUT";
	case XR_ACTION_TYPE_POSE_INPUT:
		return "XR_ACTION_TYPE_POSE_INPUT";
	case XR_ACTION_TYPE_VIBRATION_OUTPUT:
		return "XR_ACTION_TYPE_VIBRATION_OUTPUT";
	default:
		using BasicT = std::underlying_type_t<XrActionType>;
		const auto basicValue = static_cast<BasicT>(value);
		return std::format("Unknown XrActionType: {}", basicValue).c_str();
	}
}
} // namespace OXRTracing
#define OXRTL_ARGS_XrActionType(x, name) \
	TraceLoggingValue(OXRTracing::ToCString(x), name)

namespace OXRTracing {
inline const char* ToCString(XrEyeVisibility value)
{
	switch (value) {
	case XR_EYE_VISIBILITY_BOTH:
		return "XR_EYE_VISIBILITY_BOTH";
	case XR_EYE_VISIBILITY_LEFT:
		return "XR_EYE_VISIBILITY_LEFT";
	case XR_EYE_VISIBILITY_RIGHT:
		return "XR_EYE_VISIBILITY_RIGHT";
	default:
		using BasicT = std::underlying_type_t<XrEyeVisibility>;
		const auto basicValue = static_cast<BasicT>(value);
		return std::format("Unknown XrEyeVisibility: {}", basicValue).c_str();
	}
}
} // namespace OXRTracing
#define OXRTL_ARGS_XrEyeVisibility(x, name) \
	TraceLoggingValue(OXRTracing::ToCString(x), name)

namespace OXRTracing {
inline const char* ToCString(XrSessionState value)
{
	switch (value) {
	case XR_SESSION_STATE_UNKNOWN:
		return "XR_SESSION_STATE_UNKNOWN";
	case XR_SESSION_STATE_IDLE:
		return "XR_SESSION_STATE_IDLE";
	case XR_SESSION_STATE_READY:
		return "XR_SESSION_STATE_READY";
	case XR_SESSION_STATE_SYNCHRONIZED:
		return "XR_SESSION_STATE_SYNCHRONIZED";
	case XR_SESSION_STATE_VISIBLE:
		return "XR_SESSION_STATE_VISIBLE";
	case XR_SESSION_STATE_FOCUSED:
		return "XR_SESSION_STATE_FOCUSED";
	case XR_SESSION_STATE_STOPPING:
		return "XR_SESSION_STATE_STOPPING";
	case XR_SESSION_STATE_LOSS_PENDING:
		return "XR_SESSION_STATE_LOSS_PENDING";
	case XR_SESSION_STATE_EXITING:
		return "XR_SESSION_STATE_EXITING";
	default:
		using BasicT = std::underlying_type_t<XrSessionState>;
		const auto basicValue = static_cast<BasicT>(value);
		return std::format("Unknown XrSessionState: {}", basicValue).c_str();
	}
}
} // namespace OXRTracing
#define OXRTL_ARGS_XrSessionState(x, name) \
	TraceLoggingValue(OXRTracing::ToCString(x), name)

namespace OXRTracing {
inline const char* ToCString(XrObjectType value)
{
	switch (value) {
	case XR_OBJECT_TYPE_UNKNOWN:
		return "XR_OBJECT_TYPE_UNKNOWN";
	case XR_OBJECT_TYPE_INSTANCE:
		return "XR_OBJECT_TYPE_INSTANCE";
	case XR_OBJECT_TYPE_SESSION:
		return "XR_OBJECT_TYPE_SESSION";
	case XR_OBJECT_TYPE_SWAPCHAIN:
		return "XR_OBJECT_TYPE_SWAPCHAIN";
	case XR_OBJECT_TYPE_SPACE:
		return "XR_OBJECT_TYPE_SPACE";
	case XR_OBJECT_TYPE_ACTION_SET:
		return "XR_OBJECT_TYPE_ACTION_SET";
	case XR_OBJECT_TYPE_ACTION:
		return "XR_OBJECT_TYPE_ACTION";
	case XR_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT:
		return "XR_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT";
	case XR_OBJECT_TYPE_SPATIAL_ANCHOR_MSFT:
		return "XR_OBJECT_TYPE_SPATIAL_ANCHOR_MSFT";
	case XR_OBJECT_TYPE_SPATIAL_GRAPH_NODE_BINDING_MSFT:
		return "XR_OBJECT_TYPE_SPATIAL_GRAPH_NODE_BINDING_MSFT";
	case XR_OBJECT_TYPE_HAND_TRACKER_EXT:
		return "XR_OBJECT_TYPE_HAND_TRACKER_EXT";
	case XR_OBJECT_TYPE_SCENE_OBSERVER_MSFT:
		return "XR_OBJECT_TYPE_SCENE_OBSERVER_MSFT";
	case XR_OBJECT_TYPE_SCENE_MSFT:
		return "XR_OBJECT_TYPE_SCENE_MSFT";
	case XR_OBJECT_TYPE_FACIAL_TRACKER_HTC:
		return "XR_OBJECT_TYPE_FACIAL_TRACKER_HTC";
	case XR_OBJECT_TYPE_FOVEATION_PROFILE_FB:
		return "XR_OBJECT_TYPE_FOVEATION_PROFILE_FB";
	case XR_OBJECT_TYPE_TRIANGLE_MESH_FB:
		return "XR_OBJECT_TYPE_TRIANGLE_MESH_FB";
	case XR_OBJECT_TYPE_PASSTHROUGH_FB:
		return "XR_OBJECT_TYPE_PASSTHROUGH_FB";
	case XR_OBJECT_TYPE_PASSTHROUGH_LAYER_FB:
		return "XR_OBJECT_TYPE_PASSTHROUGH_LAYER_FB";
	case XR_OBJECT_TYPE_GEOMETRY_INSTANCE_FB:
		return "XR_OBJECT_TYPE_GEOMETRY_INSTANCE_FB";
	case XR_OBJECT_TYPE_SPATIAL_ANCHOR_STORE_CONNECTION_MSFT:
		return "XR_OBJECT_TYPE_SPATIAL_ANCHOR_STORE_CONNECTION_MSFT";
	case XR_OBJECT_TYPE_PASSTHROUGH_HTC:
		return "XR_OBJECT_TYPE_PASSTHROUGH_HTC";
	default:
		using BasicT = std::underlying_type_t<XrObjectType>;
		const auto basicValue = static_cast<BasicT>(value);
		return std::format("Unknown XrObjectType: {}", basicValue).c_str();
	}
}
} // namespace OXRTracing
#define OXRTL_ARGS_XrObjectType(x, name) \
	TraceLoggingValue(OXRTracing::ToCString(x), name)

///////////////////////////////////////////////
///// Generated macros for OpenXR structs /////
///////////////////////////////////////////////

#define OXRTL_ARGS_XrApiLayerProperties(x, name) \
	TraceLoggingStruct(6, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_char_FA( \
	        x.layerName, "layerName", XR_MAX_API_LAYER_NAME_SIZE), \
	    OXRTL_ARGS_XrVersion(x.specVersion, "specVersion"), \
	    OXRTL_ARGS_uint32_t(x.layerVersion, "layerVersion"), \
	    OXRTL_ARGS_char_FA( \
	        x.description, "description", XR_MAX_API_LAYER_DESCRIPTION_SIZE)
#define OXRTL_ARGS_XrExtensionProperties(x, name) \
	TraceLoggingStruct(4, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_char_FA( \
	        x.extensionName, "extensionName", XR_MAX_EXTENSION_NAME_SIZE), \
	    OXRTL_ARGS_uint32_t(x.extensionVersion, "extensionVersion")
#define OXRTL_ARGS_XrApplicationInfo(x, name) \
	TraceLoggingStruct(5, name), \
	    OXRTL_ARGS_char_FA(x.applicationName, "applicationName", \
	        XR_MAX_APPLICATION_NAME_SIZE), \
	    OXRTL_ARGS_uint32_t(x.applicationVersion, "applicationVersion"), \
	    OXRTL_ARGS_char_FA( \
	        x.engineName, "engineName", XR_MAX_ENGINE_NAME_SIZE), \
	    OXRTL_ARGS_uint32_t(x.engineVersion, "engineVersion"), \
	    OXRTL_ARGS_XrVersion(x.apiVersion, "apiVersion")
#define OXRTL_ARGS_XrInstanceCreateInfo(x, name) \
	TraceLoggingStruct(8, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrInstanceCreateFlags(x.createFlags, "createFlags"), \
	    OXRTL_ARGS_XrApplicationInfo(x.applicationInfo, "applicationInfo"), \
	    OXRTL_ARGS_uint32_t(x.enabledApiLayerCount, "enabledApiLayerCount"), \
	    OXRTL_ARGS_char_P_DA(x.enabledApiLayerNames, "enabledApiLayerNames", \
	        enabledApiLayerCount), \
	    OXRTL_ARGS_uint32_t(x.enabledExtensionCount, "enabledExtensionCount"), \
	    OXRTL_ARGS_char_P_DA(x.enabledExtensionNames, "enabledExtensionNames", \
	        enabledExtensionCount)
#define OXRTL_ARGS_XrInstanceProperties(x, name) \
	TraceLoggingStruct(4, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrVersion(x.runtimeVersion, "runtimeVersion"), \
	    OXRTL_ARGS_char_FA( \
	        x.runtimeName, "runtimeName", XR_MAX_RUNTIME_NAME_SIZE)
#define OXRTL_ARGS_XrEventDataBuffer(x, name) \
	TraceLoggingStruct(3, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_uint8_t_FA(x.varying, "varying", 4000)
#define OXRTL_ARGS_XrSystemGetInfo(x, name) \
	TraceLoggingStruct(3, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrFormFactor(x.formFactor, "formFactor")
#define OXRTL_ARGS_XrSystemGraphicsProperties(x, name) \
	TraceLoggingStruct(3, name), \
	    OXRTL_ARGS_uint32_t( \
	        x.maxSwapchainImageHeight, "maxSwapchainImageHeight"), \
	    OXRTL_ARGS_uint32_t( \
	        x.maxSwapchainImageWidth, "maxSwapchainImageWidth"), \
	    OXRTL_ARGS_uint32_t(x.maxLayerCount, "maxLayerCount")
#define OXRTL_ARGS_XrSystemTrackingProperties(x, name) \
	TraceLoggingStruct(2, name), \
	    OXRTL_ARGS_XrBool32(x.orientationTracking, "orientationTracking"), \
	    OXRTL_ARGS_XrBool32(x.positionTracking, "positionTracking")
#define OXRTL_ARGS_XrSystemProperties(x, name) \
	TraceLoggingStruct(7, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrSystemId(x.systemId, "systemId"), \
	    OXRTL_ARGS_uint32_t(x.vendorId, "vendorId"), \
	    OXRTL_ARGS_char_FA( \
	        x.systemName, "systemName", XR_MAX_SYSTEM_NAME_SIZE), \
	    OXRTL_ARGS_XrSystemGraphicsProperties( \
	        x.graphicsProperties, "graphicsProperties"), \
	    OXRTL_ARGS_XrSystemTrackingProperties( \
	        x.trackingProperties, "trackingProperties")
#define OXRTL_ARGS_XrSessionCreateInfo(x, name) \
	TraceLoggingStruct(4, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrSessionCreateFlags(x.createFlags, "createFlags"), \
	    OXRTL_ARGS_XrSystemId(x.systemId, "systemId")
#define OXRTL_ARGS_XrVector3f(x, name) \
	TraceLoggingStruct(3, name), OXRTL_ARGS_float(x.x, "x"), \
	    OXRTL_ARGS_float(x.y, "y"), OXRTL_ARGS_float(x.z, "z")
#define OXRTL_ARGS_XrSpaceVelocity(x, name) \
	TraceLoggingStruct(5, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrSpaceVelocityFlags(x.velocityFlags, "velocityFlags"), \
	    OXRTL_ARGS_XrVector3f(x.linearVelocity, "linearVelocity"), \
	    OXRTL_ARGS_XrVector3f(x.angularVelocity, "angularVelocity")
#define OXRTL_ARGS_XrQuaternionf(x, name) \
	TraceLoggingStruct(4, name), OXRTL_ARGS_float(x.x, "x"), \
	    OXRTL_ARGS_float(x.y, "y"), OXRTL_ARGS_float(x.z, "z"), \
	    OXRTL_ARGS_float(x.w, "w")
#define OXRTL_ARGS_XrPosef(x, name) \
	TraceLoggingStruct(2, name), \
	    OXRTL_ARGS_XrQuaternionf(x.orientation, "orientation"), \
	    OXRTL_ARGS_XrVector3f(x.position, "position")
#define OXRTL_ARGS_XrReferenceSpaceCreateInfo(x, name) \
	TraceLoggingStruct(4, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrReferenceSpaceType( \
	        x.referenceSpaceType, "referenceSpaceType"), \
	    OXRTL_ARGS_XrPosef(x.poseInReferenceSpace, "poseInReferenceSpace")
#define OXRTL_ARGS_XrExtent2Df(x, name) \
	TraceLoggingStruct(2, name), OXRTL_ARGS_float(x.width, "width"), \
	    OXRTL_ARGS_float(x.height, "height")
#define OXRTL_ARGS_XrActionSpaceCreateInfo(x, name) \
	TraceLoggingStruct(5, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrAction(x.action, "action"), \
	    OXRTL_ARGS_XrPath(x.subactionPath, "subactionPath"), \
	    OXRTL_ARGS_XrPosef(x.poseInActionSpace, "poseInActionSpace")
#define OXRTL_ARGS_XrSpaceLocation(x, name) \
	TraceLoggingStruct(4, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrSpaceLocationFlags(x.locationFlags, "locationFlags"), \
	    OXRTL_ARGS_XrPosef(x.pose, "pose")
#define OXRTL_ARGS_XrViewConfigurationProperties(x, name) \
	TraceLoggingStruct(4, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrViewConfigurationType( \
	        x.viewConfigurationType, "viewConfigurationType"), \
	    OXRTL_ARGS_XrBool32(x.fovMutable, "fovMutable")
#define OXRTL_ARGS_XrViewConfigurationView(x, name) \
	TraceLoggingStruct(8, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_uint32_t( \
	        x.recommendedImageRectWidth, "recommendedImageRectWidth"), \
	    OXRTL_ARGS_uint32_t(x.maxImageRectWidth, "maxImageRectWidth"), \
	    OXRTL_ARGS_uint32_t( \
	        x.recommendedImageRectHeight, "recommendedImageRectHeight"), \
	    OXRTL_ARGS_uint32_t(x.maxImageRectHeight, "maxImageRectHeight"), \
	    OXRTL_ARGS_uint32_t(x.recommendedSwapchainSampleCount, \
	        "recommendedSwapchainSampleCount"), \
	    OXRTL_ARGS_uint32_t( \
	        x.maxSwapchainSampleCount, "maxSwapchainSampleCount")
#define OXRTL_ARGS_XrSwapchainCreateInfo(x, name) \
	TraceLoggingStruct(11, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrSwapchainCreateFlags(x.createFlags, "createFlags"), \
	    OXRTL_ARGS_XrSwapchainUsageFlags(x.usageFlags, "usageFlags"), \
	    OXRTL_ARGS_int64_t(x.format, "format"), \
	    OXRTL_ARGS_uint32_t(x.sampleCount, "sampleCount"), \
	    OXRTL_ARGS_uint32_t(x.width, "width"), \
	    OXRTL_ARGS_uint32_t(x.height, "height"), \
	    OXRTL_ARGS_uint32_t(x.faceCount, "faceCount"), \
	    OXRTL_ARGS_uint32_t(x.arraySize, "arraySize"), \
	    OXRTL_ARGS_uint32_t(x.mipCount, "mipCount")
#define OXRTL_ARGS_XrSwapchainImageBaseHeader(x, name) \
	TraceLoggingStruct(2, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next")
#define OXRTL_ARGS_XrSwapchainImageAcquireInfo(x, name) \
	TraceLoggingStruct(2, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next")
#define OXRTL_ARGS_XrSwapchainImageWaitInfo(x, name) \
	TraceLoggingStruct(3, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrDuration(x.timeout, "timeout")
#define OXRTL_ARGS_XrSwapchainImageReleaseInfo(x, name) \
	TraceLoggingStruct(2, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next")
#define OXRTL_ARGS_XrSessionBeginInfo(x, name) \
	TraceLoggingStruct(3, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrViewConfigurationType( \
	        x.primaryViewConfigurationType, "primaryViewConfigurationType")
#define OXRTL_ARGS_XrFrameWaitInfo(x, name) \
	TraceLoggingStruct(2, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next")
#define OXRTL_ARGS_XrFrameState(x, name) \
	TraceLoggingStruct(5, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrTime(x.predictedDisplayTime, "predictedDisplayTime"), \
	    OXRTL_ARGS_XrDuration( \
	        x.predictedDisplayPeriod, "predictedDisplayPeriod"), \
	    OXRTL_ARGS_XrBool32(x.shouldRender, "shouldRender")
#define OXRTL_ARGS_XrFrameBeginInfo(x, name) \
	TraceLoggingStruct(2, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next")
#define OXRTL_ARGS_XrCompositionLayerBaseHeader(x, name) \
	TraceLoggingStruct(4, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrCompositionLayerFlags(x.layerFlags, "layerFlags"), \
	    OXRTL_ARGS_XrSpace(x.space, "space")
#define OXRTL_ARGS_XrFrameEndInfo(x, name) \
	TraceLoggingStruct(6, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrTime(x.displayTime, "displayTime"), \
	    OXRTL_ARGS_XrEnvironmentBlendMode( \
	        x.environmentBlendMode, "environmentBlendMode"), \
	    OXRTL_ARGS_uint32_t(x.layerCount, "layerCount"), \
	    OXRTL_ARGS_XrCompositionLayerBaseHeader_P_DA( \
	        x.layers, "layers", layerCount)
#define OXRTL_ARGS_XrViewLocateInfo(x, name) \
	TraceLoggingStruct(5, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrViewConfigurationType( \
	        x.viewConfigurationType, "viewConfigurationType"), \
	    OXRTL_ARGS_XrTime(x.displayTime, "displayTime"), \
	    OXRTL_ARGS_XrSpace(x.space, "space")
#define OXRTL_ARGS_XrViewState(x, name) \
	TraceLoggingStruct(3, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrViewStateFlags(x.viewStateFlags, "viewStateFlags")
#define OXRTL_ARGS_XrFovf(x, name) \
	TraceLoggingStruct(4, name), OXRTL_ARGS_float(x.angleLeft, "angleLeft"), \
	    OXRTL_ARGS_float(x.angleRight, "angleRight"), \
	    OXRTL_ARGS_float(x.angleUp, "angleUp"), \
	    OXRTL_ARGS_float(x.angleDown, "angleDown")
#define OXRTL_ARGS_XrView(x, name) \
	TraceLoggingStruct(4, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), OXRTL_ARGS_XrPosef(x.pose, "pose"), \
	    OXRTL_ARGS_XrFovf(x.fov, "fov")
#define OXRTL_ARGS_XrActionSetCreateInfo(x, name) \
	TraceLoggingStruct(5, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_char_FA( \
	        x.actionSetName, "actionSetName", XR_MAX_ACTION_SET_NAME_SIZE), \
	    OXRTL_ARGS_char_FA(x.localizedActionSetName, "localizedActionSetName", \
	        XR_MAX_LOCALIZED_ACTION_SET_NAME_SIZE), \
	    OXRTL_ARGS_uint32_t(x.priority, "priority")
#define OXRTL_ARGS_XrActionCreateInfo(x, name) \
	TraceLoggingStruct(7, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_char_FA( \
	        x.actionName, "actionName", XR_MAX_ACTION_NAME_SIZE), \
	    OXRTL_ARGS_XrActionType(x.actionType, "actionType"), \
	    OXRTL_ARGS_uint32_t(x.countSubactionPaths, "countSubactionPaths"), \
	    OXRTL_ARGS_XrPath_DA( \
	        x.subactionPaths, "subactionPaths", countSubactionPaths), \
	    OXRTL_ARGS_char_FA(x.localizedActionName, "localizedActionName", \
	        XR_MAX_LOCALIZED_ACTION_NAME_SIZE)
#define OXRTL_ARGS_XrActionSuggestedBinding(x, name) \
	TraceLoggingStruct(2, name), OXRTL_ARGS_XrAction(x.action, "action"), \
	    OXRTL_ARGS_XrPath(x.binding, "binding")
#define OXRTL_ARGS_XrInteractionProfileSuggestedBinding(x, name) \
	TraceLoggingStruct(5, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrPath(x.interactionProfile, "interactionProfile"), \
	    OXRTL_ARGS_uint32_t( \
	        x.countSuggestedBindings, "countSuggestedBindings"), \
	    OXRTL_ARGS_XrActionSuggestedBinding_DA( \
	        x.suggestedBindings, "suggestedBindings", countSuggestedBindings)
#define OXRTL_ARGS_XrSessionActionSetsAttachInfo(x, name) \
	TraceLoggingStruct(4, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_uint32_t(x.countActionSets, "countActionSets"), \
	    OXRTL_ARGS_XrActionSet_DA(x.actionSets, "actionSets", countActionSets)
#define OXRTL_ARGS_XrInteractionProfileState(x, name) \
	TraceLoggingStruct(3, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrPath(x.interactionProfile, "interactionProfile")
#define OXRTL_ARGS_XrActionStateGetInfo(x, name) \
	TraceLoggingStruct(4, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrAction(x.action, "action"), \
	    OXRTL_ARGS_XrPath(x.subactionPath, "subactionPath")
#define OXRTL_ARGS_XrActionStateBoolean(x, name) \
	TraceLoggingStruct(6, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrBool32(x.currentState, "currentState"), \
	    OXRTL_ARGS_XrBool32(x.changedSinceLastSync, "changedSinceLastSync"), \
	    OXRTL_ARGS_XrTime(x.lastChangeTime, "lastChangeTime"), \
	    OXRTL_ARGS_XrBool32(x.isActive, "isActive")
#define OXRTL_ARGS_XrActionStateFloat(x, name) \
	TraceLoggingStruct(6, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_float(x.currentState, "currentState"), \
	    OXRTL_ARGS_XrBool32(x.changedSinceLastSync, "changedSinceLastSync"), \
	    OXRTL_ARGS_XrTime(x.lastChangeTime, "lastChangeTime"), \
	    OXRTL_ARGS_XrBool32(x.isActive, "isActive")
#define OXRTL_ARGS_XrVector2f(x, name) \
	TraceLoggingStruct(2, name), OXRTL_ARGS_float(x.x, "x"), \
	    OXRTL_ARGS_float(x.y, "y")
#define OXRTL_ARGS_XrActionStateVector2f(x, name) \
	TraceLoggingStruct(6, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrVector2f(x.currentState, "currentState"), \
	    OXRTL_ARGS_XrBool32(x.changedSinceLastSync, "changedSinceLastSync"), \
	    OXRTL_ARGS_XrTime(x.lastChangeTime, "lastChangeTime"), \
	    OXRTL_ARGS_XrBool32(x.isActive, "isActive")
#define OXRTL_ARGS_XrActionStatePose(x, name) \
	TraceLoggingStruct(3, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrBool32(x.isActive, "isActive")
#define OXRTL_ARGS_XrActiveActionSet(x, name) \
	TraceLoggingStruct(2, name), \
	    OXRTL_ARGS_XrActionSet(x.actionSet, "actionSet"), \
	    OXRTL_ARGS_XrPath(x.subactionPath, "subactionPath")
#define OXRTL_ARGS_XrActionsSyncInfo(x, name) \
	TraceLoggingStruct(4, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_uint32_t(x.countActiveActionSets, "countActiveActionSets"), \
	    OXRTL_ARGS_XrActiveActionSet_DA( \
	        x.activeActionSets, "activeActionSets", countActiveActionSets)
#define OXRTL_ARGS_XrBoundSourcesForActionEnumerateInfo(x, name) \
	TraceLoggingStruct(3, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrAction(x.action, "action")
#define OXRTL_ARGS_XrInputSourceLocalizedNameGetInfo(x, name) \
	TraceLoggingStruct(4, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrPath(x.sourcePath, "sourcePath"), \
	    OXRTL_ARGS_XrInputSourceLocalizedNameFlags( \
	        x.whichComponents, "whichComponents")
#define OXRTL_ARGS_XrHapticActionInfo(x, name) \
	TraceLoggingStruct(4, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrAction(x.action, "action"), \
	    OXRTL_ARGS_XrPath(x.subactionPath, "subactionPath")
#define OXRTL_ARGS_XrHapticBaseHeader(x, name) \
	TraceLoggingStruct(2, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next")
#define OXRTL_ARGS_XrBaseInStructure(x, name) \
	TraceLoggingStruct(2, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_XrBaseInStructure_P(x.next, "next")
#define OXRTL_ARGS_XrBaseOutStructure(x, name) \
	TraceLoggingStruct(2, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_XrBaseOutStructure_P(x.next, "next")
#define OXRTL_ARGS_XrOffset2Di(x, name) \
	TraceLoggingStruct(2, name), OXRTL_ARGS_int32_t(x.x, "x"), \
	    OXRTL_ARGS_int32_t(x.y, "y")
#define OXRTL_ARGS_XrExtent2Di(x, name) \
	TraceLoggingStruct(2, name), OXRTL_ARGS_int32_t(x.width, "width"), \
	    OXRTL_ARGS_int32_t(x.height, "height")
#define OXRTL_ARGS_XrRect2Di(x, name) \
	TraceLoggingStruct(2, name), OXRTL_ARGS_XrOffset2Di(x.offset, "offset"), \
	    OXRTL_ARGS_XrExtent2Di(x.extent, "extent")
#define OXRTL_ARGS_XrSwapchainSubImage(x, name) \
	TraceLoggingStruct(3, name), \
	    OXRTL_ARGS_XrSwapchain(x.swapchain, "swapchain"), \
	    OXRTL_ARGS_XrRect2Di(x.imageRect, "imageRect"), \
	    OXRTL_ARGS_uint32_t(x.imageArrayIndex, "imageArrayIndex")
#define OXRTL_ARGS_XrCompositionLayerProjectionView(x, name) \
	TraceLoggingStruct(5, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), OXRTL_ARGS_XrPosef(x.pose, "pose"), \
	    OXRTL_ARGS_XrFovf(x.fov, "fov"), \
	    OXRTL_ARGS_XrSwapchainSubImage(x.subImage, "subImage")
#define OXRTL_ARGS_XrCompositionLayerProjection(x, name) \
	TraceLoggingStruct(6, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrCompositionLayerFlags(x.layerFlags, "layerFlags"), \
	    OXRTL_ARGS_XrSpace(x.space, "space"), \
	    OXRTL_ARGS_uint32_t(x.viewCount, "viewCount"), \
	    OXRTL_ARGS_XrCompositionLayerProjectionView_DA( \
	        x.views, "views", viewCount)
#define OXRTL_ARGS_XrCompositionLayerQuad(x, name) \
	TraceLoggingStruct(8, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrCompositionLayerFlags(x.layerFlags, "layerFlags"), \
	    OXRTL_ARGS_XrSpace(x.space, "space"), \
	    OXRTL_ARGS_XrEyeVisibility(x.eyeVisibility, "eyeVisibility"), \
	    OXRTL_ARGS_XrSwapchainSubImage(x.subImage, "subImage"), \
	    OXRTL_ARGS_XrPosef(x.pose, "pose"), \
	    OXRTL_ARGS_XrExtent2Df(x.size, "size")
#define OXRTL_ARGS_XrEventDataBaseHeader(x, name) \
	TraceLoggingStruct(2, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next")
#define OXRTL_ARGS_XrEventDataEventsLost(x, name) \
	TraceLoggingStruct(3, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_uint32_t(x.lostEventCount, "lostEventCount")
#define OXRTL_ARGS_XrEventDataInstanceLossPending(x, name) \
	TraceLoggingStruct(3, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrTime(x.lossTime, "lossTime")
#define OXRTL_ARGS_XrEventDataSessionStateChanged(x, name) \
	TraceLoggingStruct(5, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrSession(x.session, "session"), \
	    OXRTL_ARGS_XrSessionState(x.state, "state"), \
	    OXRTL_ARGS_XrTime(x.time, "time")
#define OXRTL_ARGS_XrEventDataReferenceSpaceChangePending(x, name) \
	TraceLoggingStruct(7, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrSession(x.session, "session"), \
	    OXRTL_ARGS_XrReferenceSpaceType( \
	        x.referenceSpaceType, "referenceSpaceType"), \
	    OXRTL_ARGS_XrTime(x.changeTime, "changeTime"), \
	    OXRTL_ARGS_XrBool32(x.poseValid, "poseValid"), \
	    OXRTL_ARGS_XrPosef(x.poseInPreviousSpace, "poseInPreviousSpace")
#define OXRTL_ARGS_XrEventDataInteractionProfileChanged(x, name) \
	TraceLoggingStruct(3, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrSession(x.session, "session")
#define OXRTL_ARGS_XrHapticVibration(x, name) \
	TraceLoggingStruct(5, name), OXRTL_ARGS_XrStructureType(x.type, "type"), \
	    OXRTL_ARGS_void_P(x.next, "next"), \
	    OXRTL_ARGS_XrDuration(x.duration, "duration"), \
	    OXRTL_ARGS_float(x.frequency, "frequency"), \
	    OXRTL_ARGS_float(x.amplitude, "amplitude")
#define OXRTL_ARGS_XrOffset2Df(x, name) \
	TraceLoggingStruct(2, name), OXRTL_ARGS_float(x.x, "x"), \
	    OXRTL_ARGS_float(x.y, "y")
#define OXRTL_ARGS_XrRect2Df(x, name) \
	TraceLoggingStruct(2, name), OXRTL_ARGS_XrOffset2Df(x.offset, "offset"), \
	    OXRTL_ARGS_XrExtent2Df(x.extent, "extent")
#define OXRTL_ARGS_XrVector4f(x, name) \
	TraceLoggingStruct(4, name), OXRTL_ARGS_float(x.x, "x"), \
	    OXRTL_ARGS_float(x.y, "y"), OXRTL_ARGS_float(x.z, "z"), \
	    OXRTL_ARGS_float(x.w, "w")
#define OXRTL_ARGS_XrColor4f(x, name) \
	TraceLoggingStruct(4, name), OXRTL_ARGS_float(x.r, "r"), \
	    OXRTL_ARGS_float(x.g, "g"), OXRTL_ARGS_float(x.b, "b"), \
	    OXRTL_ARGS_float(x.a, "a")
